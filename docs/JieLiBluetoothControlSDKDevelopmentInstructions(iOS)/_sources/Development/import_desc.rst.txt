1.Access Process
==================

1.1 Support environment
------------------------

===================== ===================================== =================================================
    Environment               Compatibility range               Notes      
===================== ===================================== =================================================
Software system             Target Version：IOS 10.0          Support BLE function
Firmware SDK           AC693NSDK, AC695NSDK,AC697NSDK etc.    It is recommended to consult the SDK principal
development tool              Xcode 13.0 or above             The latest version is recommended
===================== ===================================== =================================================

1.2 Library import
-------------------

1.2.1 Dependent library
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. **JL_BLEKit.framework** : Bluetooth function library

#. **JL_OTALib.framework** : OTA upgrade business library

#. **JL_AdvParse.framework** : JL Bluetooth device broadcast packet parsing business library

#. **JL_HashPair.framework**: Device authentication business library


1.2.3 Necessary permissions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: objective

     //Use Bluetooth permissions
    Privacy - Bluetooth Peripheral Usage Description
    Privacy - Bluetooth Always Usage Description



1.2.4 Xcode configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  Since the library contains attributes of extended classes, you need to configure **Other linker Flags** when using it.

  **-ObjC** needs to be added to **Other Linker Flags** in the **Build Settings** of the project.

.. figure:: ../_static/otherlinkerflags.jpg
   :align: center
   :width: 100%


1.3 SDK configuration
------------------------------------------------------------

1.3.1 Bluetooth initialization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: objective-c
    :linenos:

    //1、External references
    @property(strong,nonatomic) JL_BLEMultiple  *mBleMultiple;
    @property(weak  ,nonatomic) JL_EntityM      *mBleEntityM;//A Weak reference is required. Disconnect the device and search again. The SDK needs to be released. (used as the currently operating device)
    @property(strong,nonatomic) NSString        *mBleUUID;
    @property(weak  ,nonatomic) NSArray         *mFoundArray; //The device that needs to be referred to by Weak and scanned.
    @property(weak  ,nonatomic) NSArray         *mConnectedArray;//A Weak reference is required for connected devices.

    //2、Instantiate SDK
    self.mBleMultiple = [[JL_BLEMultiple alloc] init];
    self.mBleMultiple.BLE_FILTER_ENABLE = YES;    //Enable filter equipment
    self.mBleMultiple.BLE_PAIR_ENABLE = YES;      //Pairing enable
    self.mBleMultiple.BLE_TIMEOUT = 7;            //Connection timeout

    //3、Select the type of device you want to search
    self.mBleMultiple.bleDeviceTypeArr = @[@(JL_DeviceTypeWatch)];//Only Watch

    //4、The devices found by the SDK will be added to the bleConnectedArr array after clicking Connect.
    //5、call [self.mBleMultiple scanStart] will be released blePeripheralArr in JL_EntityM。
    self.mFoundArray = self.mBleMultiple.blePeripheralArr;

    //6、Devices connected to SDk will be added to the blePeripheralArr array after disconnection.
    self.mConnectedArray = self.mBleMultiple.bleConnectedArr;

    //7、Use mBleEntityM weak reference mConnectedArray Connected in JL_EntityM Device，After that, the command will be issued using the [JL_ManagerM] in mBleEntity.

    
1.3.2 Connecting devices
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: objective-c
    :linenos:

    //Connect one from the list of discovered devices.
    JL_EntityM *entity = self.mFoundArray[indexPath.row];
    /**
    Connecting devices
    @param entity Bluetooth device class
    */
    [self.mBleMultiple connectEntity:entity
                            Result:^(JL_EntityM_Status status) {
        [JL_Tools mainTask:^{
        /*【status】Error code and cause
        JL_EntityM_StatusBleOFF         = 0,    //BLE Bluetooth is not enabled
        JL_EntityM_StatusConnectFail    = 1,    //BLE connection failed
        JL_EntityM_StatusConnecting     = 2,    //BLE is connecting
        JL_EntityM_StatusConnectRepeat  = 3,    //BLE repeated connection
        JL_EntityM_StatusConnectTimeout = 4,    //BLE connection timeout
        JL_EntityM_StatusConnectRefuse  = 5,    //BLE Rejected
        JL_EntityM_StatusPairFail       = 6,    //Pairing failed
        JL_EntityM_StatusPairTimeout    = 7,    //Pairing timeout
        JL_EntityM_StatusPaired         = 8,    //Paired
        JL_EntityM_StatusMasterChanging = 9,    //Switching between master and slave
        JL_EntityM_StatusDisconnectOk   = 10,   //Disconnected successfully
        JL_EntityM_StatusNull           = 11,   //Entity is empty */

        if (status == JL_EntityM_StatusPaired) {
            NSString *txt = [NSString stringWithFormat:@"Connection succeeded:%@",deviceName];
        }else{
            NSString *txt = [NSString stringWithFormat:@"connection failed:%@",deviceName];
        }
        }];
    }];

    //Matters needing attention
    //mBleEntityM is introduced in document 1.3.1；
    //after successful connection, you must first obtain the device information；
    [self.mBleEntityM.mCmdManager cmdTargetFeatureResult:^(NSArray *array) {
        JL_CMDStatus st = [array[0] intValue];
        if (st == JL_CMDStatusSuccess) {
            /*--- model of device information ---*/
        JLModel_Device *model = [self.mBleEntityM.mCmdManager outputDeviceModel];
            NSLog(@"Get succeeded.");
        }else{
            NSLog(@"Get failed.");
        }
    }];



1.3.3 Disconnect the device
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block:: objective-c
    :linenos:
    
    /**
    Connecting devices
    @param entity Bluetooth device class
    */
    [self.mBleMultiple disconnectEntity:entity Result:^(JL_EntityM_Status status) {
        [JL_Tools mainTask:^{
            if (status == JL_EntityM_StatusDisconnectOk) {
                NSString *txt = [NSString stringWithFormat:@"Disconnected:%@",deviceName];
            }
        }];
    }];


1.3.4 MAC address loopback device
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: objective-c
    :linenos:

    [self.mBleMultiple connectEntityForMac:@"Mac Address" Result:^(JL_EntityM_Status status) {
        [JL_Tools mainTask:^{
            if (status == JL_EntityM_StatusPaired) {
                NSLog(@"----> Succeeded in connecting the device back.");
            }else{
                NSLog(@"----> Failed to connect the device back successfully.");
                }
            }];
    }];


1.3.5 UUID back connection equipment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: objective-c
    :linenos:
    
    //Find the corresponding JL according to the UUID_ EntityM connection.
    JL_EntityM *entity = [bleMp makeEntityWithUUID:@"UUID-xxxx-xxxx-xxxx-xxxx"];

    /*--- 1、UUID connection device ---*/
    [self.mBleMultiple connectEntity:entity Result:^(JL_EntityM_Status status){
        [JL_Tools mainTask:^{
            if (status == JL_EntityM_StatusPaired) {
                NSLog(@"----> UUID successfully reconnects the device.");
            }else{
                NSLog(@"----> Failed to connect the device back successfully.");
            }
        }];
    }];



1.3.6 Initialization after successful Bluetooth connection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: objective-c
    :linenos:

    //Received kJL_ BLE_ M_ ENTITY_ Connected notification, the following processing shall be performed:
    /*--- Turn off the headset information push ---*/
    [self.mBleEntityM.mCmdManager.mTwsManager cmdHeadsetAdvEnable:NO];

    /*--- Synchronization timestamp ---*/
    NSDate *date = [NSDate new];
    JL_SystemTime *systemTime = self.mBleEntityM.mCmdManager.mSystemTime;
    [systemTime cmdSetSystemTime:date];

    /*--- Clear device music cache ---*/
    [self.mBleEntityM.mCmdManager.mFileManager cmdCleanCacheType:JL_CardTypeUSB];
    [self.mBleEntityM.mCmdManager.mFileManager cmdCleanCacheType:JL_CardTypeSD_0];
    [self.mBleEntityM.mCmdManager.mFileManager cmdCleanCacheType:JL_CardTypeSD_1];

    __weak typeof(self) wSelf = self;
    /*--- Get device information ---*/
    [self.mBleEntityM.mCmdManager cmdTargetFeatureResult:^(JL_CMDStatus status,uint8_t sn,NSData *_Nullable data){
            JL_CMDStatus st = status;
            if(st == JL_CMDStatusSuccess){
                [wSelf startTimeout];

            JLModel_Device *model = [wSelf.mBleEntityM.mCmdManager outputDeviceModel];
            JL_OtaStatus upSt = model.otaStatus;
            if(upSt == JL_OtaStatusForce){
                wSelf.mBleEntityM.mBLE_NEED_OTA = YES;
                return;
    }else{
        if(model.otaHeadset == JL_OtaHeadsetYES){
            wSelf.mBleEntityM.mBLE_NEED_OTA = YES;
            return;
        }
    }
    wSelf.mBleEntityM.mBLE_NEED_OTA = NO;

    /*--- Common information ---*/
            [wSelf.mBleEntityM.mCmdManager cmdGetSystemInfo:JL_FunctionCodeCOMMON Result:^(JL_CMDStatus status,uint8_t sn,NSData *_Nullable data){
                [wSelf.mBleEntityM.mCmdManager cmdGetSystemInfo:JL_FunctionCodeBT Result:^(JL_CMDStatus status,uint8_t sn,NSData *_Nullable data){

                }];
            }];
        }
    }];



1.3.7 Notification callback of monitoring discovery, connection, disconnection, Bluetooth status, etc
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: objective-c
    :linenos:

    extern NSString *kJL_BLE_M_FOUND;               //1、devices detected
    extern NSString *kJL_BLE_M_FOUND_SINGLE;        //2、Discover a single device
    extern NSString *kJL_BLE_M_ENTITY_CONNECTED;    //3、Device connection
    extern NSString *kJL_BLE_M_ENTITY_DISCONNECTED; //4、Device disconnection
    extern NSString *kJL_BLE_M_ON;                  //5、BLE ON
    extern NSString *kJL_BLE_M_OFF;                 //6、BLE OFF
    extern NSString *kJL_BLE_M_EDR_CHANGE;          //7、Change of classic Bluetooth output channel
    //Listen to the notifications at points 1, 3 and 4, 
    check the changes of mBleMultiple.blePeripheralArr array elements, and update the UI.
    //Monitor the notification at point 5 to know the changes of the current classic Bluetooth
     connection and call back the classic Bluetooth information:
                @{@"ADDRESS":@"7c9a1da7330e",      //Classic Bluetooth address
                @"TYPE"   :@"BluetoothA2DPOutput", //type
                @"NAME"   :@"earphone"}            //name





